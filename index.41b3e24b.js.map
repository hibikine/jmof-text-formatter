{"mappings":"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","sources":["<anon>","web.ts","convertArrayToFiles.ts","main.ts","RowNew.ts","lib/hasChinese.ts","lib/isEmptyRow.ts","parseCSV.ts"],"sourcesContent":["function $fad92827804c59e1$export$70879c71870b335(row) {\n    return row.length > 8;\n}\n\n\nfunction $8712deefe0da5ab2$export$459de32a84a7cc7d(row) {\n    return \"chineseHans\" in row;\n}\nfunction $8712deefe0da5ab2$export$18036450b7062329(row) {\n    if ((0, $fad92827804c59e1$export$70879c71870b335)(row)) return {\n        id: parseInt(row[0], 10),\n        status: row[1] || row[7] || null,\n        style: row[2],\n        japanese: row[3],\n        chineseHans: row[4],\n        chineseHant: row[5],\n        english: row[6],\n        comment: row[9]\n    };\n    return {\n        id: parseInt(row[0], 10),\n        status: row[1] || row[5] || null,\n        style: row[2],\n        japanese: row[3],\n        english: row[4],\n        comment: row[7]\n    };\n}\n\n\nconst $25aa99fdd3227299$var$getHeaderAndFooter = (style, language)=>{\n    switch(style){\n        case \"H2\":\n        case \"H3\":\n        case \"H4\":\n            return [\n                `${\"#\".repeat(parseInt(style.charAt(1), 10))} `,\n                \"\"\n            ];\n        case \"Img\":\n            return [\n                \"![image](\",\n                \")\"\n            ];\n        case \"Nt!\":\n        case \"Pct!\":\n            if (language === \"japanese\") return [\n                \"**\\u203B\",\n                \"**\"\n            ];\n            return [\n                \"**Note: \",\n                \"**\"\n            ];\n        case \"Nt\":\n        case \"Ct\":\n            if (language === \"japanese\") return [\n                \"*\\u203B\",\n                \"*\"\n            ];\n            return [\n                \"*Note: \",\n                \"*\"\n            ];\n        case \"Pct\":\n            if (language === \"japanese\") return [\n                \"\\u203B\",\n                \"\"\n            ];\n            return [\n                \"Note: \",\n                \"\"\n            ];\n        case \"Btn-\":\n            return [\n                '<Button name=\"',\n                '\" disabled />'\n            ];\n        case \"Btn+\":\n            return [\n                '<Button name=\"',\n                '\" />'\n            ];\n        case \"wTab\":\n            return [\n                \"<ContentTabs>\\n\",\n                \"</ContentTabs>\"\n            ];\n    }\n    return [\n        \"\",\n        \"\"\n    ];\n};\nconst $25aa99fdd3227299$var$format = (text, style)=>{\n    let prevText = text;\n    do {\n        prevText = text;\n        text = text.replace(/\\[(.+)\\]\\(https?:\\/\\/(www\\.)?jmof\\.jp(\\/.+)\\)/, \"[$1]($3)\");\n    }while (text !== prevText);\n    switch(style){\n        case \"UL\":\n            return `- ${text}`;\n        case \"OL\":\n            return `1. ${text}`;\n        case \"Nt!\":\n        case \"Nt\":\n        case \"Pct!\":\n        case \"Pct\":\n        case \"Ct\":\n            const trimTextMatch = text.match(/^(Note: |※)/);\n            if (trimTextMatch !== null) {\n                const len = trimTextMatch?.[0]?.length;\n                if (len != null) return text.slice(len);\n            }\n            return text;\n        case \"Btn+\":\n            const link = text.match(/\\[(.+)\\]\\((.+)\\)/);\n            if (link === null) return text;\n            return `${link[1]}\" to=\"${link[2]}`;\n        default:\n            return text;\n    }\n};\nconst $25aa99fdd3227299$var$convertRow = (row, index, csv)=>{\n    const [_id, status, style, japanese, english, comment] = row;\n    if ([\n        \"\\u975E\\u8868\\u793A\",\n        \"\\u524A\\u9664\"\n    ].includes(status) || [\n        \"Spcl\",\n        \"hImg\"\n    ].includes(style)) return null;\n    // wip\n    if (![\n        \"H2\",\n        \"H3\",\n        \"H4\",\n        \"P\",\n        \"UL\",\n        \"OL\",\n        \"Img\",\n        \"Nt\",\n        \"Nt!\",\n        \"Ct\",\n        \"Pct!\",\n        \"Pct\",\n        \"Btn-\",\n        \"Btn+\",\n        \"wTab\"\n    ].includes(style)) return null;\n    const japaneseText = $25aa99fdd3227299$var$convertEachLanguage(style, japanese, \"japanese\");\n    const englishText = $25aa99fdd3227299$var$convertEachLanguage(style, english, \"english\");\n    return {\n        japaneseText: japaneseText,\n        englishText: englishText\n    };\n};\nconst $25aa99fdd3227299$var$convertEachLanguage = (style, text, language)=>{\n    if (text === \"\") return null;\n    const [japaneseHeader, japaneseFooter] = $25aa99fdd3227299$var$getHeaderAndFooter(style, language);\n    return `${japaneseHeader}${$25aa99fdd3227299$var$format(text, style)}${japaneseFooter}`;\n};\nconst $25aa99fdd3227299$var$styleGen = (s, _)=>{\n    return typeof _ === \"undefined\" ? (args)=>[\n            ...args\n        ].fill(s.join()) : (args)=>args.map((v)=>`${s[0]}${v}${s[1]}`);\n};\nconst $25aa99fdd3227299$export$9d30c0f0d1500ce0 = (text, style, addHeader, row)=>{\n    const styleFn = new Map([\n        [\n            \"H1\",\n            (t)=>{\n                addHeader(\"title\", t);\n                return null;\n            }\n        ],\n        [\n            \"hImg\",\n            (_)=>{\n                addHeader(\"titleImage\", [\n                    ..._\n                ].fill(row.comment.replace(\"\\n\", \" \")));\n                return null;\n            }\n        ],\n        [\n            \"H2\",\n            $25aa99fdd3227299$var$styleGen`\n## ${0}`\n        ],\n        [\n            \"H3\",\n            $25aa99fdd3227299$var$styleGen`\n### ${0}`\n        ],\n        [\n            \"H4\",\n            $25aa99fdd3227299$var$styleGen`\n#### ${0}`\n        ],\n        [\n            \"P\",\n            $25aa99fdd3227299$var$styleGen`${0}`\n        ],\n        [\n            \"UL\",\n            $25aa99fdd3227299$var$styleGen`- ${0}`\n        ],\n        [\n            \"OL\",\n            $25aa99fdd3227299$var$styleGen`1. ${0}`\n        ],\n        [\n            \"Img\",\n            $25aa99fdd3227299$var$styleGen`![image](${0})`\n        ],\n        [\n            \"Nt!\",\n            (t)=>t.map((v, i)=>{\n                    const trimTextMatch = v.match(/^(Note: |※)/);\n                    if (trimTextMatch !== null) v = v.slice(trimTextMatch[0].length);\n                    if (i === t.length - 1) return `**Note: ${v}**`;\n                    return `**\\u{203B}${v}**`;\n                })\n        ],\n        [\n            \"Pct!\",\n            (t)=>t.map((v, i)=>{\n                    const trimTextMatch = v.match(/^(Note: |※)/);\n                    if (trimTextMatch !== null) v = v.slice(trimTextMatch[0].length);\n                    if (i === t.length - 1) return `**Note: ${v}**`;\n                    return `**\\u{203B}${v}**`;\n                })\n        ],\n        [\n            \"Nt\",\n            (t)=>t.map((v, i)=>{\n                    const trimTextMatch = v.match(/^(Note: |※)/);\n                    if (trimTextMatch !== null) v = v.slice(trimTextMatch[0].length);\n                    if (i === t.length - 1) return `*Note: ${v}*`;\n                    return `*\\u{203B}${v}*`;\n                })\n        ],\n        [\n            \"Ct\",\n            (t)=>t.map((v, i)=>{\n                    const trimTextMatch = v.match(/^(Note: |※)/);\n                    if (trimTextMatch !== null) v = v.slice(trimTextMatch[0].length);\n                    if (i === t.length - 1) return `*Note: ${v}*`;\n                    return `*\\u{203B}${v}*`;\n                })\n        ],\n        [\n            \"Pct\",\n            (t)=>t.map((v, i)=>{\n                    const trimTextMatch = v.match(/^(Note: |※)/);\n                    if (trimTextMatch !== null) v = v.slice(trimTextMatch[0].length);\n                    if (i === t.length - 1) return `Note: ${v}`;\n                    return `\\u{203B}${v}`;\n                })\n        ],\n        [\n            \"Btn-\",\n            (t)=>t.map((v)=>{\n                    const link = v.match(/\\[(.+)\\]\\((.+)\\)/);\n                    if (link === null) return `<Button name=\"${v}\" disabled />`;\n                    return `<Button name=\"${link[1]}\" to=\"${link[2]}\" disabled />`;\n                })\n        ],\n        [\n            \"Btn+\",\n            (t)=>t.map((v)=>{\n                    const link = v.match(/\\[(.+)\\]\\((.+)\\)/);\n                    if (link === null) return `<Button name=\"${v}\" />`;\n                    return `<Button name=\"${link[1]}\" to=\"${link[2]}\" />`;\n                })\n        ],\n        [\n            \"wTbs\",\n            $25aa99fdd3227299$var$styleGen`\\n<ContentTabs>`\n        ],\n        [\n            \"wTbe\",\n            $25aa99fdd3227299$var$styleGen`</ContentTabs>\\n`\n        ],\n        [\n            \"tTb1\",\n            $25aa99fdd3227299$var$styleGen`  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`\n        ],\n        [\n            \"tTb2\",\n            $25aa99fdd3227299$var$styleGen`\n  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`\n        ],\n        [\n            \"tTb3\",\n            $25aa99fdd3227299$var$styleGen`\n  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`\n        ],\n        [\n            \"tTb4\",\n            $25aa99fdd3227299$var$styleGen`  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >`\n        ]\n    ]).get(style);\n    if (!styleFn) {\n        console.warn(`style not found: ${style}`);\n        return text;\n    }\n    return styleFn(text) ?? text;\n};\nconst $25aa99fdd3227299$export$18036450b7062329 = (row, addHeader)=>$25aa99fdd3227299$export$9d30c0f0d1500ce0((0, $8712deefe0da5ab2$export$459de32a84a7cc7d)(row) ? [\n        row.japanese,\n        row.chineseHans,\n        row.chineseHant,\n        row.english\n    ] : [\n        row.japanese,\n        row.english\n    ], row.style, addHeader, row);\nconst $25aa99fdd3227299$var$convertYaml = (k, v)=>v.map((v2)=>`${k}: \"${v2}\"`);\nconst $25aa99fdd3227299$var$convertYamlArray = (k, v)=>{\n    if (v.length === 0) return null;\n    return v[0].map((_, i)=>`${k}:\n${v.map((item)=>`  - \"${item[i].replace('\"', '\\\\\"')}\"`).join(\"\\n\")}`);\n};\nconst $25aa99fdd3227299$export$babfce6eed1abae3 = ()=>{\n    const header = {\n        slug: null,\n        title: null,\n        slugs: [],\n        titleImage: null\n    };\n    const headerNotEmpty = (k)=>header[k] != null && header[k] instanceof Array && header[k].length !== 0;\n    const headerArrayNotEmpty = (k)=>header[k] instanceof Array && header[k].length > 0;\n    const addHeader = (key, value)=>{\n        switch(key){\n            case \"slugs\":\n                header[key].push(value);\n                return;\n            case \"slug\":\n            case \"title\":\n            case \"titleImage\":\n            default:\n                header[key] = value;\n                return;\n        }\n    };\n    const generateHeader = ()=>{\n        const keys = Object.keys(header).filter((k)=>![\n                \"slug\",\n                \"title\",\n                \"slugs\",\n                \"titleImage\"\n            ].includes(k));\n        const contents = [\n            ...[\n                \"slug\",\n                \"title\"\n            ].filter(headerNotEmpty).map((k)=>$25aa99fdd3227299$var$convertYaml(k, header[k])),\n            ...[\n                \"slugs\"\n            ].filter(headerArrayNotEmpty).map((k)=>$25aa99fdd3227299$var$convertYamlArray(k, header[k])),\n            ...[\n                \"titleImage\"\n            ].filter(headerNotEmpty).map((k)=>$25aa99fdd3227299$var$convertYaml(k, header[k])),\n            ...keys.map((k)=>{\n                if (header[k] instanceof Array) {\n                    if (header[k].length === 0) return null;\n                    if (header[k] instanceof Array) {\n                        if (header[k][0].length === 0) return null;\n                        // Array\n                        return $25aa99fdd3227299$var$convertYamlArray(k, header[k]);\n                    }\n                    return $25aa99fdd3227299$var$convertYaml(k, header[k]);\n                }\n                return null;\n            }).filter(Boolean)\n        ];\n        const cleanContents = contents.reduce((prev, curr)=>prev.map((v, i)=>[\n                    ...v,\n                    curr[i]\n                ]), [\n            ...contents?.[0]\n        ].map(()=>[])).map((v)=>v.join(\"\\n\"));\n        return cleanContents.map((c)=>`---\n${c}\n---`);\n    };\n    return [\n        generateHeader,\n        addHeader\n    ];\n};\nconst $25aa99fdd3227299$export$54fe54687c75704f = (csv)=>{\n    const [generateHeader, addHeader] = $25aa99fdd3227299$export$babfce6eed1abae3();\n    const convertedRows = csv.filter((r)=>r.status !== \"\\u524A\\u9664\" && r.status !== \"\\u975E\\u8868\\u793A\").map((r)=>$25aa99fdd3227299$export$18036450b7062329(r, addHeader));\n    const joinedText = convertedRows.reduce((prev, convertedRow)=>{\n        convertedRow.map((v, i)=>prev[i].push(v));\n        return prev;\n    }, [\n        ...convertedRows[0]\n    ].map(()=>[])).map((v)=>v.filter(Boolean).join(\"\\n\"));\n    const headers = generateHeader();\n    const result = joinedText.map((v, i)=>{\n        if (headers[i] === undefined) return `${headers[headers.length - 1]}\n${v}`;\n        return `${headers[i]}\n${v}`;\n    });\n    return result;\n};\nconst $25aa99fdd3227299$export$9c68d69a4c5bbcf9 = (csv)=>{\n    const tabRow = csv.find(([, , style])=>style === \"Tab\");\n    const tabText = [\n        tabRow?.[3] ?? \"\",\n        tabRow?.[4] ?? \"\"\n    ];\n    const titleRow = csv.find(([, , style])=>style === \"H1\");\n    const titleText = [\n        titleRow?.[3] ?? \"\",\n        titleRow?.[4] ?? \"\"\n    ];\n    const headerImageRow = csv.find(([, , style])=>style === \"hImg\");\n    const headerImage = (headerImageRow?.[5] ?? \"\").match(/https?:\\/\\/[\\w!\\?/\\+\\-_~=;\\.,\\*&@#\\$%\\(\\)'\\[\\]]+/)?.[0] ?? \"\";\n    const getHeaderText = (language_key)=>`---\nslug: \"/url/input/here\"\ntitle: \"${titleText[language_key]}\"\n${headerImageRow ? `titleImage: \"${headerImage}\"\n` : \"\"}---${tabText[language_key] === \"\" ? \"\" : `\n\n  <ContentTab\n    name=\"${tabText[language_key]}\"\n    tabId=\"tabid_goes_here\"\n    defaultCheckedPath={[\"/path/name/here\"]}\n  >`}\n`;\n    const getFooterText = (language_key)=>tabText[language_key] === \"\" ? \"\" : `\n\n  </ContentTabs>`;\n    const result = csv.map($25aa99fdd3227299$var$convertRow).filter(Boolean);\n    const japaneseResult = result.map((v)=>v.japaneseText).filter(Boolean) // 空文字とnullを除外\n    .reduce($25aa99fdd3227299$var$joinText);\n    const englishResult = result.map((v)=>v.englishText).filter(Boolean).reduce($25aa99fdd3227299$var$joinText);\n    return [\n        japaneseResult,\n        englishResult\n    ].map((resultText, i)=>`${getHeaderText(i)}${resultText}${getFooterText(i)}\n`);\n};\nconst $25aa99fdd3227299$var$joinText = (text, row, index, array)=>{\n    const prev = index > 0 ? array[index - 1] : \"\";\n    if (// 前の段落がリスト\n    \"- \" === prev.slice(0, 2) && \"- \" === row.slice(0, 2) || // 前の段落が番号つきリスト\n    \"1. \" === prev.slice(0, 3) && \"1. \" === row.slice(0, 3) || // 前の段落が見出し\n    prev.match(/^#{2,4} ./) !== null) // 間に1行改行を入れる\n    return `${text}\\n${row}`;\n    return `${text}\\n\\n${row}`;\n};\nconst $25aa99fdd3227299$var$parseTitle = (text)=>{\n    const texts = text.split(\"_\");\n    return texts[texts.length - 1];\n};\nconst $25aa99fdd3227299$export$74a4512520fa7d54 = (csv)=>{\n    let day = {\n        ja: \"\",\n        en: \"\"\n    };\n    const result = csv.map((row)=>{\n        if (row[2] === \"nwH4\") {\n            day = {\n                ja: row[3],\n                en: row[4]\n            };\n            return null;\n        } else if (row[2] === \"nwP\") return {\n            ja: {\n                [day.ja]: row[3]\n            },\n            en: {\n                [day.en]: row[4]\n            }\n        };\n        return null;\n    });\n    const filteredResult = result.filter(Boolean);\n    if (filteredResult.length === 0) return null;\n    const jaResult = filteredResult.map(({ ja: ja })=>ja);\n    const enResult = filteredResult.map(({ en: en })=>en);\n    return {\n        ja: JSON.stringify(jaResult),\n        en: JSON.stringify(enResult)\n    };\n};\nconst $25aa99fdd3227299$export$23971afb62f9dd86 = (csv)=>csv[3].some((v)=>v.startsWith(\"\\u4E2D\\u6587\"));\n\n\n\nfunction $37253c0905dc0137$export$ee1d59c3151f153d(row) {\n    const checkCells = (0, $fad92827804c59e1$export$70879c71870b335)(row) ? row.slice(1, 6) : row.slice(1, 4);\n    return checkCells.every((cell)=>cell === \"\");\n}\n\n\n\nconst $3c4bf738621ab5ef$export$45f8e7e2b25c8146 = 2;\nconst $3c4bf738621ab5ef$export$1246e5c04c070025 = (array)=>{\n    // FIXME: 決め打ちなので直す\n    const headerIndex = 3; // array.findIndex((row) => row[0] === 'ID');\n    const newContentsArray = array.slice(headerIndex + $3c4bf738621ab5ef$export$45f8e7e2b25c8146) // ヘッダー行以降を取得\n    .filter((r)=>!(0, $37253c0905dc0137$export$ee1d59c3151f153d)(r)) // 空行消す\n    .map((0, $8712deefe0da5ab2$export$18036450b7062329));\n    const files = (0, $25aa99fdd3227299$export$54fe54687c75704f)(newContentsArray);\n    return files;\n};\n\n\n/**\n * @see https://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n */ function $555382c64cbd4245$export$5777570ea8dff499(strData, strDelimiter = \",\") {\n    // Create a regular expression to parse the CSV values.\n    const objPattern = new RegExp(// Delimiters.\n    \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Quoted fields.\n    '(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|' + // Standard fields.\n    '([^\"\\\\' + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\");\n    const arrData = [\n        []\n    ];\n    let arrMatches = null;\n    while(arrMatches = objPattern.exec(strData)){\n        var strMatchedDelimiter = arrMatches[1];\n        if (strMatchedDelimiter.length && strMatchedDelimiter != strDelimiter) arrData.push([]);\n        if (arrMatches[2]) var strMatchedValue = arrMatches[2].replace(new RegExp('\"\"', \"g\"), '\"');\n        else var strMatchedValue = arrMatches[3];\n        arrData[arrData.length - 1].push(strMatchedValue);\n    }\n    return arrData;\n}\n\n\n(()=>{\n    const runButton = document.getElementById(\"run\");\n    const inputTextarea = document.getElementById(\"inputtext\");\n    const resultTextarea = document.getElementById(\"result\");\n    runButton.addEventListener(\"click\", ()=>{\n        const t = inputTextarea.value;\n        resultTextarea.value = (0, $3c4bf738621ab5ef$export$1246e5c04c070025)((0, $555382c64cbd4245$export$5777570ea8dff499)(t)).join(\"\\n\\n\\n----------------------------\\n\\n\\n\");\n    });\n})();\n\n\n//# sourceMappingURL=index.41b3e24b.js.map\n","import { convertArrayToFiles } from './convertArrayToFiles';\nimport { CSVToArray } from './parseCSV';\n\n(() => {\n  const runButton = document.getElementById('run') as HTMLButtonElement;\n  const inputTextarea = document.getElementById(\n    'inputtext'\n  ) as HTMLTextAreaElement;\n  const resultTextarea = document.getElementById(\n    'result'\n  ) as HTMLTextAreaElement;\n\n  runButton.addEventListener('click', () => {\n    const t = inputTextarea.value;\n    resultTextarea.value = convertArrayToFiles(CSVToArray(t)).join(\n      '\\n\\n\\n----------------------------\\n\\n\\n'\n    );\n  });\n})();\n","import { convertNew } from './main';\nimport { isEmptyRow } from './lib/isEmptyRow';\nimport { RowNew, convertRowNew } from './RowNew';\nexport const HEADER_ROW_COUNT = 2;\n\nexport const convertArrayToFiles = (array: string[][]): string[] => {\n  // FIXME: 決め打ちなので直す\n  const headerIndex = 3; // array.findIndex((row) => row[0] === 'ID');\n\n  const newContentsArray: RowNew[] = array\n    .slice(headerIndex + HEADER_ROW_COUNT) // ヘッダー行以降を取得\n    .filter((r) => !isEmptyRow(r)) // 空行消す\n    .map(convertRowNew);\n\n  const files = convertNew(newContentsArray);\n  return files;\n};\n","import { RowNew, isRowNewWithChinese } from './RowNew';\n\nexport type TextUpdateStatus = '追加' | '削除' | '変更' | '非表示' | '移動';\nexport type SpecialStyle =\n  | '[段落スタイル]'\n  | 'Pct!'\n  | 'Pct'\n  | 'Nt!'\n  | 'Nt'\n  | 'Ct'\n  | '[文字以外の構成要素]'\n  | 'Btn+'\n  | 'Btn-'\n  | 'hImg'\n  | 'wTab'\n  | 'wTbs'\n  | 'wTbe'\n  | 'tTb1'\n  | 'tTb2'\n  | 'tTb3'\n  | 'tTb4'\n  | 'Tab'\n  | 'Wdgt'\n  | 'Spcl'\n  | '[トップページ専用]'\n  | 'hmH1'\n  | 'hmH2'\n  | 'hmH3'\n  | 'aBar'\n  | 'tImg'\n  | 'nwH4'\n  | 'nwP'\n  | '[float属性]'\n  | 'fLH3'\n  | 'fLH4'\n  | 'fLP'\n  | 'fLImg'\n  | 'fRH3'\n  | 'fRH4'\n  | 'fRP'\n  | 'fRImg'\n  | '[ストコン専用]'\n  | 'scH2'\n  | 'scH3'\n  | 'scH4'\n  | 'scH1'\n  | 'scP';\ntype HTMLStyle = 'H1' | 'H2' | 'H3' | 'H4' | 'P' | 'UL' | 'OL' | 'Img';\n\nexport type Style = SpecialStyle | HTMLStyle;\nexport type RowOld = [\n  id: number,\n  status: TextUpdateStatus,\n  style: Style,\n  japanese: string,\n  english: string,\n  comment: string,\n];\nexport type RowWithChinese = [\n  id: number,\n  status: TextUpdateStatus,\n  style: Style,\n  japanese: string,\n  chineseHans: string,\n  chineseHant: string,\n  english: string,\n  comment: string,\n];\ntype Language = 'japanese' | 'english';\n\nconst getHeaderAndFooter = (\n  style: Style,\n  language: Language\n): [header: string, footer: string] => {\n  switch (style) {\n    case 'H2':\n    case 'H3':\n    case 'H4':\n      return [`${'#'.repeat(parseInt(style.charAt(1), 10))} `, ''];\n    case 'Img':\n      return ['![image](', ')'];\n    case 'Nt!':\n    case 'Pct!':\n      if (language === 'japanese') {\n        return ['**※', '**'];\n      }\n      return ['**Note: ', '**'];\n    case 'Nt':\n    case 'Ct':\n      if (language === 'japanese') {\n        return ['*※', '*'];\n      }\n      return ['*Note: ', '*'];\n    case 'Pct':\n      if (language === 'japanese') {\n        return ['※', ''];\n      }\n      return ['Note: ', ''];\n    case 'Btn-':\n      return ['<Button name=\"', '\" disabled />'];\n    case 'Btn+':\n      return ['<Button name=\"', '\" />'];\n    case 'wTab':\n      return ['<ContentTabs>\\n', '</ContentTabs>'];\n  }\n  return ['', ''];\n};\n\nconst format = (text: string, style: Style): string => {\n  let prevText = text;\n  do {\n    prevText = text;\n    text = text.replace(\n      /\\[(.+)\\]\\(https?:\\/\\/(www\\.)?jmof\\.jp(\\/.+)\\)/,\n      '[$1]($3)'\n    );\n  } while (text !== prevText);\n  switch (style) {\n    case 'UL':\n      return `- ${text}`;\n    case 'OL':\n      return `1. ${text}`;\n    case 'Nt!':\n    case 'Nt':\n    case 'Pct!':\n    case 'Pct':\n    case 'Ct':\n      const trimTextMatch = text.match(/^(Note: |※)/);\n      if (trimTextMatch !== null) {\n        const len = trimTextMatch?.[0]?.length;\n        if (len != null) {\n          return text.slice(len);\n        }\n      }\n      return text;\n    case 'Btn+':\n      const link = text.match(/\\[(.+)\\]\\((.+)\\)/);\n      if (link === null) {\n        return text;\n      }\n      return `${link[1]}\" to=\"${link[2]}`;\n    default:\n      return text;\n  }\n};\n\nconst convertRow = (\n  row: RowOld,\n  index: number,\n  csv: RowOld[]\n): { japaneseText: null | string; englishText: null | string } => {\n  const [_id, status, style, japanese, english, comment] = row;\n  if (['非表示', '削除'].includes(status) || ['Spcl', 'hImg'].includes(style)) {\n    return null;\n  }\n\n  // wip\n  if (\n    ![\n      'H2',\n      'H3',\n      'H4',\n      'P',\n      'UL',\n      'OL',\n      'Img',\n      'Nt',\n      'Nt!',\n      'Ct',\n      'Pct!',\n      'Pct',\n      'Btn-',\n      'Btn+',\n      'wTab',\n    ].includes(style)\n  ) {\n    return null;\n  }\n\n  const japaneseText = convertEachLanguage(style, japanese, 'japanese');\n  const englishText = convertEachLanguage(style, english, 'english');\n  return {\n    japaneseText,\n    englishText,\n  };\n};\n\nconst convertEachLanguage = (\n  style: Style,\n  text: string,\n  language: 'japanese' | 'english'\n): null | string => {\n  if (text === '') {\n    return null;\n  }\n  const [japaneseHeader, japaneseFooter] = getHeaderAndFooter(style, language);\n  return `${japaneseHeader}${format(text, style)}${japaneseFooter}`;\n};\nconst styleGen = (\n  s: TemplateStringsArray,\n  _?: 0\n): ((t: string[]) => string[]) => {\n  return typeof _ === 'undefined'\n    ? (args) => [...args].fill(s.join())\n    : (args: string[]) => args.map((v) => `${s[0]}${v}${s[1]}`);\n};\nexport const addRowStyle = (\n  text: string[],\n  style: Style,\n  addHeader: (key: string, value: string[]) => void,\n  row: RowNew\n): string[] => {\n  const styleFn = new Map<Style, (t: string[]) => string[] | null>([\n    [\n      'H1',\n      (t) => {\n        addHeader('title', t);\n        return null;\n      },\n    ],\n    [\n      'hImg',\n      (_) => {\n        addHeader('titleImage', [..._].fill(row.comment.replace('\\n', ' ')));\n        return null;\n      },\n    ],\n    [\n      'H2',\n      styleGen`\n## ${0}`,\n    ],\n    [\n      'H3',\n      styleGen`\n### ${0}`,\n    ],\n    [\n      'H4',\n      styleGen`\n#### ${0}`,\n    ],\n    ['P', styleGen`${0}`],\n    ['UL', styleGen`- ${0}`],\n    ['OL', styleGen`1. ${0}`],\n    ['Img', styleGen`![image](${0})`],\n    [\n      'Nt!',\n      (t) =>\n        t.map((v, i) => {\n          const trimTextMatch = v.match(/^(Note: |※)/);\n          if (trimTextMatch !== null) {\n            v = v.slice(trimTextMatch[0].length);\n          }\n          if (i === t.length - 1) {\n            return `**Note: ${v}**`;\n          }\n          return `**※${v}**`;\n        }),\n    ],\n    [\n      'Pct!',\n      (t) =>\n        t.map((v, i) => {\n          const trimTextMatch = v.match(/^(Note: |※)/);\n          if (trimTextMatch !== null) {\n            v = v.slice(trimTextMatch[0].length);\n          }\n          if (i === t.length - 1) {\n            return `**Note: ${v}**`;\n          }\n          return `**※${v}**`;\n        }),\n    ],\n    [\n      'Nt',\n      (t) =>\n        t.map((v, i) => {\n          const trimTextMatch = v.match(/^(Note: |※)/);\n          if (trimTextMatch !== null) {\n            v = v.slice(trimTextMatch[0].length);\n          }\n          if (i === t.length - 1) {\n            return `*Note: ${v}*`;\n          }\n          return `*※${v}*`;\n        }),\n    ],\n    [\n      'Ct',\n      (t) =>\n        t.map((v, i) => {\n          const trimTextMatch = v.match(/^(Note: |※)/);\n          if (trimTextMatch !== null) {\n            v = v.slice(trimTextMatch[0].length);\n          }\n          if (i === t.length - 1) {\n            return `*Note: ${v}*`;\n          }\n          return `*※${v}*`;\n        }),\n    ],\n    [\n      'Pct',\n      (t) =>\n        t.map((v, i) => {\n          const trimTextMatch = v.match(/^(Note: |※)/);\n          if (trimTextMatch !== null) {\n            v = v.slice(trimTextMatch[0].length);\n          }\n          if (i === t.length - 1) {\n            return `Note: ${v}`;\n          }\n          return `※${v}`;\n        }),\n    ],\n    [\n      'Btn-',\n      (t) =>\n        t.map((v) => {\n          const link = v.match(/\\[(.+)\\]\\((.+)\\)/);\n          if (link === null) {\n            return `<Button name=\"${v}\" disabled />`;\n          }\n          return `<Button name=\"${link[1]}\" to=\"${link[2]}\" disabled />`;\n        }),\n    ],\n    [\n      'Btn+',\n      (t) =>\n        t.map((v) => {\n          const link = v.match(/\\[(.+)\\]\\((.+)\\)/);\n          if (link === null) {\n            return `<Button name=\"${v}\" />`;\n          }\n          return `<Button name=\"${link[1]}\" to=\"${link[2]}\" />`;\n        }),\n    ],\n    ['wTbs', styleGen`\\n<ContentTabs>`],\n    ['wTbe', styleGen`</ContentTabs>\\n`],\n    [\n      'tTb1',\n      styleGen`  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`,\n    ],\n    [\n      'tTb2',\n      styleGen`\n  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`,\n    ],\n    [\n      'tTb3',\n      styleGen`\n  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >\n`,\n    ],\n    [\n      'tTb4',\n      styleGen`  </ContentTab>\n  <ContentTab\n    name=\"${0}\"\n    tabId=\"__FIXME_TABID_GOES_HERE__\"\n    defaultChekcedPath={[\"/__FIXME__/PATH/NAME/HERE\"]}\n  >`,\n    ],\n  ]).get(style);\n  if (!styleFn) {\n    console.warn(`style not found: ${style}`);\n    return text;\n  }\n  return styleFn(text) ?? text;\n};\nexport const convertRowNew = (\n  row: RowNew,\n  addHeader: (k: string, v: string[]) => void\n): string[] =>\n  addRowStyle(\n    isRowNewWithChinese(row)\n      ? [row.japanese, row.chineseHans, row.chineseHant, row.english]\n      : [row.japanese, row.english],\n    row.style,\n    addHeader,\n    row\n  );\nconst convertYaml = (k: string, v: string[]): string[] =>\n  v.map((v2) => `${k}: \"${v2}\"`);\nconst convertYamlArray = (k: string, v: string[][]): string[] | null => {\n  if (v.length === 0) {\n    return null;\n  }\n  return v[0].map(\n    (_, i) =>\n      `${k}:\n${v.map((item) => `  - \"${item[i].replace('\"', '\\\\\"')}\"`).join('\\n')}`\n  );\n};\nexport const headerGenerator = (): [\n  generateHeader: () => string[],\n  addHeader: (key: string, value: string[]) => void,\n] => {\n  const header: {\n    slug: null | string[];\n    title: null | string[];\n    slugs: string[][];\n    titleImage: null | string[];\n    [key: string]: string[] | string[][] | null;\n  } = {\n    slug: null,\n    title: null,\n    slugs: [],\n    titleImage: null,\n  };\n  const headerNotEmpty = (k: string) =>\n    header[k] != null && header[k] instanceof Array && header[k].length !== 0;\n  const headerArrayNotEmpty = (k: string) =>\n    header[k] instanceof Array && header[k].length > 0;\n  const addHeader = (key: string, value: string[]) => {\n    switch (key) {\n      case 'slugs':\n        header[key].push(value);\n        return;\n      case 'slug':\n      case 'title':\n      case 'titleImage':\n      default:\n        header[key] = value;\n        return;\n    }\n  };\n  const generateHeader = (): string[] => {\n    const keys = Object.keys(header).filter(\n      (k) => !['slug', 'title', 'slugs', 'titleImage'].includes(k)\n    );\n    const contents = [\n      ...(['slug', 'title'] as const)\n        .filter(headerNotEmpty)\n        .map((k) => convertYaml(k, header[k])),\n      ...(['slugs'] as const)\n        .filter(headerArrayNotEmpty)\n        .map((k) => convertYamlArray(k, header[k])),\n      ...(['titleImage'] as const)\n        .filter(headerNotEmpty)\n        .map((k) => convertYaml(k, header[k])),\n      ...keys\n        .map((k): null | string[] => {\n          if (header[k] instanceof Array) {\n            if (header[k].length === 0) {\n              return null;\n            }\n            if (header[k] instanceof Array) {\n              if (header[k][0].length === 0) {\n                return null;\n              }\n              // Array\n              return convertYamlArray(k, header[k] as string[][]);\n            }\n            return convertYaml(k, header[k] as string[]);\n          }\n          return null;\n        })\n        .filter(Boolean),\n    ];\n    const cleanContents = contents\n      .reduce(\n        (prev, curr) => prev.map((v, i) => [...v, curr[i]]),\n        [...contents?.[0]].map(() => []) as string[][]\n      )\n      .map((v) => v.join('\\n'));\n    return cleanContents.map(\n      (c) => `---\n${c}\n---`\n    );\n  };\n  return [generateHeader, addHeader];\n};\n\nexport const convertNew = (csv: RowNew[]): string[] => {\n  const [generateHeader, addHeader] = headerGenerator();\n  const convertedRows = csv\n    .filter((r) => r.status !== '削除' && r.status !== '非表示')\n    .map((r) => convertRowNew(r, addHeader));\n  const joinedText = convertedRows\n    .reduce(\n      (prev: string[][], convertedRow) => {\n        convertedRow.map((v, i) => prev[i].push(v));\n        return prev;\n      },\n      [...convertedRows[0]].map((): string[] => [])\n    )\n    .map((v) => v.filter(Boolean).join('\\n'));\n  const headers = generateHeader();\n  const result = joinedText.map((v, i) => {\n    if (headers[i] === undefined) {\n      return `${headers[headers.length - 1]}\n${v}`;\n    }\n    return `${headers[i]}\n${v}`;\n  });\n\n  return result;\n};\nexport const convert = (\n  csv: RowOld[]\n): [japaneseText: string, englishText: string] => {\n  const tabRow = csv.find(([, , style]) => style === 'Tab');\n  const tabText: [string, string] = [tabRow?.[3] ?? '', tabRow?.[4] ?? ''];\n  const titleRow = csv.find(([, , style]) => style === 'H1');\n  const titleText: [string, string] = [\n    titleRow?.[3] ?? '',\n    titleRow?.[4] ?? '',\n  ];\n  const headerImageRow = csv.find(([, , style]) => style === 'hImg');\n  const headerImage =\n    (headerImageRow?.[5] ?? '').match(\n      /https?:\\/\\/[\\w!\\?/\\+\\-_~=;\\.,\\*&@#\\$%\\(\\)'\\[\\]]+/\n    )?.[0] ?? '';\n  const getHeaderText = (language_key: 0 | 1) => `---\nslug: \"/url/input/here\"\ntitle: \"${titleText[language_key]}\"\n${\n  headerImageRow\n    ? `titleImage: \"${headerImage}\"\n`\n    : ''\n}---${\n    tabText[language_key] === ''\n      ? ''\n      : `\n\n  <ContentTab\n    name=\"${tabText[language_key]}\"\n    tabId=\"tabid_goes_here\"\n    defaultCheckedPath={[\"/path/name/here\"]}\n  >`\n  }\n`;\n  const getFooterText = (language_key: 0 | 1) =>\n    tabText[language_key] === ''\n      ? ''\n      : `\n\n  </ContentTabs>`;\n  const result = csv.map(convertRow).filter(Boolean);\n  const japaneseResult = result\n    .map((v) => v.japaneseText)\n    .filter(Boolean) // 空文字とnullを除外\n    .reduce(joinText);\n  const englishResult = result\n    .map((v) => v.englishText)\n    .filter(Boolean)\n    .reduce(joinText);\n  return [japaneseResult, englishResult].map(\n    (resultText, i: 0 | 1) =>\n      `${getHeaderText(i)}${resultText}${getFooterText(i)}\n`\n  ) as [string, string];\n};\n\nconst joinText = (\n  text: string,\n  row: string,\n  index: number,\n  array: string[]\n) => {\n  const prev = index > 0 ? array[index - 1] : '';\n  if (\n    // 前の段落がリスト\n    ('- ' === prev.slice(0, 2) && '- ' === row.slice(0, 2)) ||\n    // 前の段落が番号つきリスト\n    ('1. ' === prev.slice(0, 3) && '1. ' === row.slice(0, 3)) ||\n    // 前の段落が見出し\n    prev.match(/^#{2,4} ./) !== null\n  ) {\n    // 間に1行改行を入れる\n    return `${text}\\n${row}`;\n  }\n  return `${text}\\n\\n${row}`;\n};\n\nconst parseTitle = (text: string): string => {\n  const texts = text.split('_');\n  return texts[texts.length - 1];\n};\n\nexport const convertNews = (\n  csv: RowOld[]\n): null | { ja: string; en: string } => {\n  let day = {\n    ja: '',\n    en: '',\n  };\n  const result = csv.map((row) => {\n    if (row[2] === 'nwH4') {\n      day = {\n        ja: row[3],\n        en: row[4],\n      };\n      return null;\n    } else if (row[2] === 'nwP') {\n      return {\n        ja: { [day.ja]: row[3] },\n        en: { [day.en]: row[4] },\n      };\n    }\n    return null;\n  });\n  const filteredResult = result.filter(Boolean);\n  if (filteredResult.length === 0) {\n    return null;\n  }\n  const jaResult = filteredResult.map(({ ja }) => ja);\n  const enResult = filteredResult.map(({ en }) => en);\n  return {\n    ja: JSON.stringify(jaResult),\n    en: JSON.stringify(enResult),\n  };\n};\n\nexport const checkHasChinese = (csv: string[][]): boolean =>\n  csv[3].some((v) => v.startsWith('中文'));\n","import type { Style, TextUpdateStatus } from './main';\nimport { hasChinese } from './lib/hasChinese';\n\nexport type RowNewJapaneseEnglish = {\n  id: number;\n  status: TextUpdateStatus | null;\n  style: Style;\n  japanese: string;\n  english: string;\n  comment: string;\n};\nexport type RowNewWithChinese = {\n  chineseHans: string;\n  chineseHant: string;\n} & RowNewJapaneseEnglish;\nexport function isRowNewWithChinese(row: RowNew): row is RowNewWithChinese {\n  return 'chineseHans' in row;\n}\nexport function convertRowNew(row: string[]): RowNew {\n  if (hasChinese(row)) {\n    return {\n      id: parseInt(row[0], 10),\n      status: ((row[1] || row[7]) as TextUpdateStatus) || null,\n      style: row[2] as Style,\n      japanese: row[3],\n      chineseHans: row[4],\n      chineseHant: row[5],\n      english: row[6],\n      comment: row[9],\n    };\n  }\n  return {\n    id: parseInt(row[0], 10),\n    status: ((row[1] || row[5]) as TextUpdateStatus) || null,\n    style: row[2] as Style,\n    japanese: row[3],\n    english: row[4],\n    comment: row[7],\n  };\n}\nexport type RowNew = RowNewJapaneseEnglish | RowNewWithChinese;\n","export function hasChinese(row: string[]): boolean {\n  return row.length > 8;\n}\n","import { hasChinese } from './hasChinese';\n\nexport function isEmptyRow<T extends string[]>(row: T): boolean {\n  const checkCells = hasChinese(row) ? row.slice(1, 6) : row.slice(1, 4);\n  return checkCells.every((cell) => cell === '');\n}\n","/**\n * @see https://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n */\nexport function CSVToArray(strData: string, strDelimiter: string = \",\") {\n  // Create a regular expression to parse the CSV values.\n  const objPattern = new RegExp(\n    // Delimiters.\n    \"(\\\\\" +\n      strDelimiter +\n      \"|\\\\r?\\\\n|\\\\r|^)\" +\n      // Quoted fields.\n      '(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|' +\n      // Standard fields.\n      '([^\"\\\\' +\n      strDelimiter +\n      \"\\\\r\\\\n]*))\",\n    \"gi\"\n  );\n  const arrData: string[][] = [[]];\n  let arrMatches: RegExpExecArray = null;\n  while ((arrMatches = objPattern.exec(strData))) {\n    var strMatchedDelimiter = arrMatches[1];\n    if (strMatchedDelimiter.length && strMatchedDelimiter != strDelimiter) {\n      arrData.push([]);\n    }\n    if (arrMatches[2]) {\n      var strMatchedValue = arrMatches[2].replace(new RegExp('\"\"', \"g\"), '\"');\n    } else {\n      var strMatchedValue = arrMatches[3];\n    }\n    arrData[arrData.length - 1].push(strMatchedValue);\n  }\n  return arrData;\n}\n"],"names":["$8712deefe0da5ab2$export$18036450b7062329","row","length","id","parseInt","status","style","japanese","chineseHans","chineseHant","english","comment","$25aa99fdd3227299$var$styleGen","s","_","args","fill","join","map","v","$25aa99fdd3227299$export$9d30c0f0d1500ce0","text","addHeader","styleFn","Map","t","replace","i","trimTextMatch","match","slice","link","get","console","warn","$25aa99fdd3227299$export$18036450b7062329","$25aa99fdd3227299$var$convertYaml","k","v2","$25aa99fdd3227299$var$convertYamlArray","item","$25aa99fdd3227299$export$babfce6eed1abae3","header","slug","title","slugs","titleImage","headerNotEmpty","Array","headerArrayNotEmpty","keys","Object","filter","includes","contents","Boolean","cleanContents","reduce","prev","curr","c","key","value","push","$25aa99fdd3227299$export$54fe54687c75704f","csv","generateHeader","convertedRows","r","joinedText","convertedRow","headers","result","undefined","$3c4bf738621ab5ef$export$1246e5c04c070025","array","newContentsArray","headerIndex","checkCells","every","cell","files","runButton","document","getElementById","inputTextarea","resultTextarea","addEventListener","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue"],"version":3,"file":"index.41b3e24b.js.map"}